{"version":3,"sources":["../src/index.js"],"names":["app","use","bodyParser","json","urlencoded","extended","morgan","token","req","res","hostname","configpath","corsValidation","whitelist","whitelisted_domain","console","log","corsOptions","origin","callback","indexOf","Error","get","status","version","listen"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,MAAM,wBAAV;AACA;;AAEAA,IAAIC,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAH,IAAIC,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB;AAC7BC,WAAU;AADmB,CAAtB,CAAR;AAGAC,iBAAOC,KAAP,CAAa,MAAb,EAAqB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACxC,QAAOD,IAAIE,QAAX;AACA,CAFD;AAGAV,IAAIC,GAAJ,CAAQ,sBAAO,gEAAP,CAAR;AACAD,IAAIC,GAAJ,CAAQ,4BAAR;;AAGA,IAAIU,qBAAWC,cAAf,EAA+B;AAC9B,KAAMC,YAAYF,qBAAWG,kBAA7B;AACAC,SAAQC,GAAR,CAAY,iBAAZ,EAA+BH,SAA/B;AACA,KAAMI,cAAc;AACnBC,UAAQ,gBAAUA,OAAV,EAAkBC,QAAlB,EAA4B;AACnCJ,WAAQC,GAAR,CAAY,QAAZ,EAAsBE,OAAtB;AACA,OAAIL,UAAUO,OAAV,CAAkBF,OAAlB,MAA8B,CAAC,CAA/B,IAAoC,CAACA,OAAzC,EAAiD;AAChDC,aAAS,IAAT,EAAe,IAAf;AACA,IAFD,MAEO;AACNA,aAAS,IAAIE,KAAJ,CAAU,qBAAV,CAAT;AACA;AACD;AARkB,EAApB;;AAYArB,KAAIC,GAAJ,CAAQ,oBAAKgB,WAAL,CAAR;AACA,CAhBD,MAiBK;AACJjB,KAAIC,GAAJ,CAAQ,qBAAR;AACA;;AAED,iBAAOD,GAAP;AACAA,IAAIsB,GAAJ,CAAQ,GAAR,EAAa,UAACd,GAAD,EAAMC,GAAN,EAAc;AAC1BA,KAAIN,IAAJ,CAAS;AACRoB,UAAQ,iBADA,EACmBC,SAAS;AAD5B,EAAT;AAGA,CAJD;AAKAxB,IAAIyB,MAAJ,CAAW,IAAX,EAAiB,YAAY;AAC5BV,SAAQC,GAAR,CAAY,oBAAZ;AACA,CAFD;kBAGehB,G","file":"index.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport cors from 'cors'\nimport morgan from 'morgan'\nimport compression from 'compression'\nimport config from './config.json'\nimport routes from './api/v1'\nimport expressWinston from 'express-winston';\nimport winston from 'winston';\nimport configpath from './api/v1/configpath'\n\nlet app = express()\n// app.server = http.createServer(app)\n\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({\n\textended: true\n}))\nmorgan.token('host', function (req, res) {\n\treturn req.hostname;\n});\napp.use(morgan(':method :host :status :res[content-length] - :response-time ms'))\napp.use(compression())\n\n\nif (configpath.corsValidation) {\n\tconst whitelist = configpath.whitelisted_domain\n\tconsole.log(\"whitelisted url\", whitelist)\n\tconst corsOptions = {\n\t\torigin: function (origin, callback) {\n\t\t\tconsole.log(\"origin\", origin)\n\t\t\tif (whitelist.indexOf(origin) !== -1 || !origin) {\n\t\t\t\tcallback(null, true)\n\t\t\t} else {\n\t\t\t\tcallback(new Error('Not allowed by CORS'))\n\t\t\t}\n\t\t}\n\t}\n\n\n\tapp.use(cors(corsOptions));\n}\nelse {\n\tapp.use(cors())\n}\n\nroutes(app);\napp.get('/', (req, res) => {\n\tres.json({\n\t\tstatus: \"server running!\", version: \"1.0.0\"\n\t})\n})\napp.listen(8081, function () {\n\tconsole.log('listening on 8081,')\n});\nexport default app\n"]}