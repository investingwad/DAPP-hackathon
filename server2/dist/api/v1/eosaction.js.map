{"version":3,"sources":["../../../src/api/v1/eosaction.js"],"names":["eostransact","serializetrx","pushonquotanull","sortDSPep","getTransaction","getUser","dotenv","require","config","axios","OreId","Api","JsonRpc","RpcError","erroraction","configerr","JsSignatureProvider","default","fetch","TextEncoder","TextDecoder","defaultPrivateKey","process","env","private_key","signatureProvider","dspEndptArr","DSP_Endpoints","console","log","rpc","api","textDecoder","textEncoder","oreId","appName","APP_NAME","appId","API_ID","apiKey","API_KEY","serviceKey","SERVICE_KEY","oreIdUrl","ORE_URL","resultid","tabres","get_table_rows","code","contract","json","limit","lower_bound","toString","scope","table","verifytable","upper_bound","resultcontract1","result","keys","Object","serializedTransaction","forEach","key","push","Uint8Array","resobj","finalres","pushSignedTransaction","res","err","msg","split","quotaerr","find","a","includes","errmsg","smartcontracterr","i","repobj","itr","length","temphttpEndpoint","defaultEndpoint","errors","no_dsp_quota","tabacc","tabpck","intersection","rows","filter","some","o1","api_endpoint","o2","acc","account","sort","b","quota","trxid","temp","history_get_transaction","username","get_account","account_name"],"mappings":"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","file":"eosaction.js","sourcesContent":["const dotenv = require('dotenv')\ndotenv.config()\nconst axios = require('axios')\nconst { OreId } = require('eos-auth');\nconst { Api, JsonRpc, RpcError } = require('eosjs');\nconst erroraction = require('./errorhandler')\nconst configerr = require('./configpath')\nconst JsSignatureProvider = require('eosjs/dist/eosjs-jssig').default;  // development only\nconst fetch = require('node-fetch');                            // node only; not needed in browsers\nconst { TextEncoder, TextDecoder } = require('util');\nconst defaultPrivateKey = process.env.private_key;\nconst signatureProvider = new JsSignatureProvider([]);\n//const httpEndpoint = 'https://kylin-dsp-1.liquidapps.io';\nlet dspEndptArr = configerr.DSP_Endpoints\nconsole.log(\"endpoint selected =>\", dspEndptArr[0])\nlet rpc = new JsonRpc(dspEndptArr[0], { fetch })\nlet api = new Api({ rpc, signatureProvider, textDecoder: new TextDecoder(), textEncoder: new TextEncoder() });\nconst oreId = new OreId({ appName: process.env.APP_NAME, appId: process.env.API_ID, apiKey: process.env.API_KEY, serviceKey: process.env.SERVICE_KEY, oreIdUrl: process.env.ORE_URL });\n\n\nexport async function eostransact(resultid) {\n\n    const tabres = await api.rpc.get_table_rows({\n        code: process.env.contract,\n        json: true,\n        limit: 1,\n        lower_bound: resultid.toString(),\n        scope: process.env.contract,\n        table: process.env.verifytable,\n        upper_bound: resultid.toString()\n    })\n    return tabres\n}\n\nexport async function serializetrx(resultcontract1) {\n    var result = [];\n    var keys = Object.keys(resultcontract1.serializedTransaction);\n    keys.forEach(function (key) {\n        result.push(resultcontract1.serializedTransaction[key]);\n    });\n    resultcontract1.serializedTransaction = new Uint8Array(result)\n    //console.log(resultcontract1);\n    let resobj = {}\n    try {\n        console.log(\"hiting\",dspEndptArr[0])\n        let finalres = await api.pushSignedTransaction(resultcontract1)\n        resobj.res = finalres\n        return resobj\n\n    } catch (err) {\n        console.log('err--', err)\n        let msg = err.toString().split(':')\n        var quotaerr = msg.find(a => a.includes(' not enough quota for this provider'))\n        if (quotaerr) {\n            let result = await pushonquotanull(resultcontract1, 0)\n            return result\n        }\n        else {\n            let errmsg = await erroraction.smartcontracterr(err)\n            console.log('s.m. err--', errmsg)\n\n            resobj.err = errmsg\n            return resobj\n        }\n\n    }\n\n}\n\nexport async function pushonquotanull(resultcontract1, i) {\n    let repobj = {}\n    let itr = i + 1\n   // let finddspep = sortDSPep()\n    console.log(\"inside quota error\")\n    while (itr < dspEndptArr.length) {\n        console.log(\"Tring DSP endpoint =>\", dspEndptArr[itr])\n        try {\n            let temphttpEndpoint = dspEndptArr[itr]\n            var rpc = new JsonRpc(temphttpEndpoint, { fetch })\n            var api = new Api({ rpc, signatureProvider, textDecoder: new TextDecoder(), textEncoder: new TextEncoder() });\n\n            let finalres = await api.pushSignedTransaction(resultcontract1)\n            let defaultEndpoint = dspEndptArr[0]\n             rpc = await new JsonRpc(defaultEndpoint, { fetch })\n             api = await new Api({ rpc, signatureProvider, textDecoder: new TextDecoder(), textEncoder: new TextEncoder() });\n            repobj.res = finalres\n            return repobj\n        } catch (err) {\n            console.log('err--', err)\n            let msg = err.toString().split(':')\n            var quotaerr = msg.find(a => a.includes(' not enough quota for this provider'))\n            if (quotaerr) {\n                itr++;\n            }\n            else {\n                let errmsg = await erroraction.smartcontracterr(err)\n                console.log('s.m. err--', errmsg)\n\n                repobj.err = errmsg\n                return repobj\n            }\n        }\n\n    }\n\n    repobj.err = configerr.errors.no_dsp_quota\n    return repobj\n\n}\n\nexport async function sortDSPep() {\n    let temphttpEndpoint = dspEndptArr[0]\n    var rpc = new JsonRpc(temphttpEndpoint, { fetch })\n    var api = new Api({ rpc, signatureProvider, textDecoder: new TextDecoder(), textEncoder: new TextEncoder() });\n\n    const tabacc = await api.rpc.get_table_rows({\n        code: 'dappservices',\n        json: true,\n        limit:50,\n        scope: 'DAPP',\n        table: 'accountext',\n    })\n    const tabpck = await api.rpc.get_table_rows({\n        code: 'dappservices',\n        json: true,\n        limit:50,\n        scope: 'dappservices',\n        table: 'package',\n    })\n    const intersection = tabpck.rows.filter(o1 => dspEndptArr.some(o2 => o1.api_endpoint === o2));\n    console.log(\"intersection--\",intersection)\n    const result = tabacc.rows.find( acc => acc.account === process.env.contract);\n   // console.log(\"account--\",result)\n    var find = tabacc.rows.filter(function(result) {\n        return result.account === process.env.contract;\n        });\n        console.log(\"account--\",find)\n        find.sort((a,b) => (a.quota > b.quota) ? 1 : ((b.quota > a.quota) ? -1 : 0));\n        console.log(\"account--\",find)\n\n}\n\nexport async function getTransaction(trxid) {\n    const temp = await api.rpc.history_get_transaction(trxid)//JsonRpc.history_get_transaction({id:trxid})\n    console.log(temp)\n    return temp\n}\n\nexport async function getUser(username) {\n    let temp\n    try {\n        temp = await api.rpc.get_account(username)\n\n        console.log(temp.account_name)\n        return temp.account_name\n    } catch (err) {\n        console.log(err)\n\n    }\n\n\n}\n\n//sortDSPep()\n\n\n\n\n\n    //////////////////\n    // let msg = err.toString().split(':')\n    // if (msg) {\n    //   var quotaerr = msg.find(a => a.includes(' not enough quota for this provider'))\n    //   if (quotaerr){\n\n    //     try {\n\n    //     }catch(err)\n    //     {\n\n    //     }\n\n    //   }\n    //   else {\n    //     let errmsg = await erroraction.smartcontracterr(err)\n    //     console.log('s.m. err--', errmsg)\n    //     return res.status(400).send(errmsg)\n    //   }\n    //   ///////////////////////////////////\n\n    // }\n    ///////////////////"]}