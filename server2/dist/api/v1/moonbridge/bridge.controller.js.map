{"version":3,"sources":["../../../../src/api/v1/moonbridge/bridge.controller.js"],"names":["bridgeController","dotenv","require","config","actiontask","erroraction","btoa","axios","OreId","request","keccak256","oreId","appName","process","env","APP_NAME","appId","API_ID","apiKey","API_KEY","serviceKey","SERVICE_KEY","oreIdUrl","ORE_URL","create","req","res","status","send","signup","totaltime","Date","now","body","email","name","pin","account_type","errorobj","incompleteargs","console","log","str","missingparams","join","errors","incompleteArgument","message","invalidacc_type","user","accountType","userPassword","custodialNewAccount","accountName","userdata","getUser","respobj","main_acc_name","permobj","permissions","find","o","chainNetwork","main_account_name","chainAccount","authorization","chainAcc","main_accname","moonservicecontract","actor","permission","apppermission","transactionJson","account","contract","data","username","acctype","encoded","JSON","stringify","timestamp","oreresp","post","chain_account","transaction","broadcast","chain_network","user_password","headers","finalres","serializetrx","signed_transaction","account_name","err","errmsg","oreerr","login","missing_main_accname","resp","publicKey","wrong_acc_type","transaction_id","issuccessful","errobj","generate_claim","claim_id","claim_data","attribute_key","hash","witness","witness_action","provider","returnSignedTransaction","sign","signedTransaction","errcode","whitelist_user","wrong_mainnet_acc","not_mainnet_acc","contractpermissionacc","contractpermissionaccpin","verify_claimdata","result_id","resultid","resultdata","eostransact","is_verified","rows","length","isverified","get_verification_result","params","resobj","verification_result","smartcontract_error","dspfetcherr","migrate_account","args","toType","result","custodialMigrateAccount","get_transaction_info","trxinfo","getTransaction","trx","receipt","transaction_status","expiration","toISOString","replace","block_num","last_irreversible_block","smartcontracterr"],"mappings":"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","file":"bridge.controller.js","sourcesContent":["let bridgeController = {}\nconst dotenv = require('dotenv')\ndotenv.config()\nlet config = require('../configpath')\nconst actiontask = require('../eosaction')\nconst erroraction = require('../errorhandler')\nvar btoa = require('btoa')\nconst axios = require('axios')\nconst { OreId } = require('eos-auth')\nvar request = require('request')\nconst keccak256 = require('js-sha3').keccak256\nconst oreId = new OreId({\n  appName: process.env.APP_NAME,\n  appId: process.env.API_ID,\n  apiKey: process.env.API_KEY,\n  serviceKey: process.env.SERVICE_KEY,\n  oreIdUrl: process.env.ORE_URL\n})\n\nbridgeController.create = (req, res) => {\n  res.status(200).send('nodejs bridge , checked header')\n}\n\nbridgeController.signup = async (req, res) => {\n  let totaltime = Date.now()\n  if (\n    !req.body.email ||\n    !req.body.name ||\n    !req.body.pin ||\n    !req.body.account_type\n  ) {\n    let errorobj = await erroraction.incompleteargs(\"signup\", req.body)\n    console.log(\"errorobj-\", errorobj)\n    let str = errorobj.missingparams.join(\",\")\n    config.errors.incompleteArgument.message = \"Missing required parameters : \" + str\n    return res.status(400).send(config.errors.incompleteArgument)\n  }\n\n  if (req.body.account_type != 'virtual' && req.body.account_type != 'native') {\n    return res.status(400).send(config.errors.invalidacc_type)\n  }\n\n  try {\n    let user = {\n      accountType: req.body.account_type,\n      email: req.body.email,\n      name: req.body.name,\n      userPassword: req.body.pin\n    }\n    let { accountName } = await oreId.custodialNewAccount(user)\n    let userdata = await oreId.getUser(accountName)\n    console.log('accn name-> ', userdata)\n    let respobj = {}\n    let main_acc_name\n    if (req.body.account_type == 'native') {\n      let permobj = userdata.permissions.find(\n        o => o.chainNetwork === process.env.chainNetwork\n      )\n\n      respobj.main_account_name = permobj.chainAccount\n      main_acc_name = permobj.chainAccount\n    }\n    /////////////////////////////////\n    let authorization = []\n    let chainAcc\n    let main_accname\n    if (req.body.account_type == 'virtual') {\n      chainAcc = process.env.moonservicecontract\n      main_accname = accountName\n      authorization = [\n        {\n          actor: process.env.moonservicecontract,\n          permission: accountName\n        }\n      ]\n    } else {\n      main_accname = main_acc_name\n      chainAcc = main_acc_name\n      authorization = [\n        {\n          actor: main_acc_name,\n          permission: process.env.apppermission\n        }\n      ]\n    }\n    const transactionJson = {\n      account: process.env.contract,\n      name: 'logintrack',\n      authorization: authorization,\n      data: {\n        username: accountName,\n        acctype: req.body.account_type,\n        main_accname: main_accname\n      }\n    }\n\n    var encoded = btoa(JSON.stringify(transactionJson))\n    console.log('encoded-', encoded)\n    let timestamp = Date.now()\n    let oreresp = await axios.post(\n      'https://service.oreid.io/api/custodial/sign',\n      {\n        account: accountName,\n        chain_account: chainAcc,\n        transaction: encoded,\n        broadcast: false,\n        chain_network: process.env.chainNetwork,\n        user_password: req.body.pin\n      },\n      { headers: config.headers }\n    )\n    console.log(\"time taken by ORE---\", Date.now() - timestamp)\n   // console.log(oreresp.data.signed_transaction)\n    let finalres = await actiontask.serializetrx(\n      oreresp.data.signed_transaction\n    )\n    console.log('pushed result- ', finalres)\n    if (finalres.res) {\n      respobj.account_name = accountName\n      console.log(\"total time taken ---\", Date.now() - totaltime)\n      return res.status(200).send(respobj)\n    }\n    else if (finalres.err) {\n      return res.status(400).send(finalres.err)\n    }\n    ////////////////////////////////////\n  } catch (err) {\n    console.log('err--', err)\n    let errmsg = await erroraction.oreerr(err)\n    console.log('ore. err--', errmsg)\n    return res.status(400).send(errmsg)\n  }\n}\nbridgeController.login = async (req, res) => {\n  let totaltime = Date.now()\n  if (!req.body.account_name || !req.body.pin || !req.body.account_type) {\n    let errorobj = await erroraction.incompleteargs(\"login\", req.body)\n    console.log(\"errorobj-\", errorobj)\n    let str = errorobj.missingparams.join(\",\")\n    config.errors.incompleteArgument.message = \"Missing required parameters : \" + str\n    return res.status(400).send(config.errors.incompleteArgument)\n  }\n  if (req.body.account_type != 'virtual' && req.body.account_type != 'native') {\n    return res.status(400).send(config.errors.invalidacc_type)\n  }\n\n  if (req.body.account_type == 'native' && !req.body.main_account_name) {\n    return res.status(400).send(config.errors.missing_main_accname)\n  }\n\n  try {\n    let resp = await oreId.getUser(req.body.account_name)\n    let permobj = resp.permissions.find(\n      o => o.chainNetwork === process.env.chainNetwork\n    )\n    if (req.body.account_type == 'virtual') {\n      if (!permobj.accountType) {\n        if (permobj.publicKey) {\n          return res.status(400).send(config.errors.wrong_acc_type)\n        }\n      }\n      else {\n        if (permobj.accountType != \"nested\") {\n          return res.status(400).send(config.errors.wrong_acc_type)\n        }\n      }\n    }\n    else {\n      if (!permobj.accountType) {\n        if (!permobj.publicKey) {\n          return res.status(400).send(config.errors.wrong_acc_type)\n        }\n      }\n      else {\n        if (permobj.accountType != \"chain\") {\n          return res.status(400).send(config.errors.wrong_acc_type)\n        }\n      }\n    }\n\n    // console.log('--', resp)\n  } catch (err) {\n    let errmsg = await erroraction.oreerr(err)\n    console.log('ore. err--', errmsg)\n    return res.status(400).send(errmsg)\n  }\n\n  try {\n    let authorization = []\n    let chainAcc\n    let main_accname\n    if (req.body.account_type == 'virtual') {\n      chainAcc = process.env.moonservicecontract\n      main_accname = req.body.account_name\n      authorization = [\n        {\n          actor: process.env.moonservicecontract,\n          permission: req.body.account_name\n        }\n      ]\n    } else {\n      main_accname = req.body.main_account_name\n      chainAcc = req.body.main_account_name\n      authorization = [\n        {\n          actor: req.body.main_account_name,\n          permission: process.env.apppermission\n        }\n      ]\n    }\n    const transactionJson = {\n      account: process.env.contract,\n      name: 'logintrack',\n      authorization: authorization,\n      data: {\n        username: req.body.account_name,\n        acctype: req.body.account_type,\n        main_accname: main_accname\n      }\n    }\n\n    var encoded = btoa(JSON.stringify(transactionJson))\n    console.log('encoded-', encoded)\n    let timestamp = Date.now()\n    let oreresp = await axios.post(\n      'https://service.oreid.io/api/custodial/sign',\n      {\n        account: req.body.account_name,\n        chain_account: chainAcc,\n        transaction: encoded,\n        broadcast: false,\n        chain_network: process.env.chainNetwork,\n        user_password: req.body.pin\n      },\n      { headers: config.headers }\n    )\n    console.log(\"time taken by ORE---\", Date.now() - timestamp)\n\n    let finalres = await actiontask.serializetrx(\n      oreresp.data.signed_transaction\n    )\n    console.log('pushed result- ', finalres)\n    if (finalres.res) {\n      let respobj = {}\n      respobj.transaction_id = finalres.res.transaction_id;\n      respobj.issuccessful = true\n      console.log(\"total time taken ---\", Date.now() - totaltime)\n      return res.status(200).send(respobj)\n    }\n    else if (finalres.err) {\n      return res.status(400).send(finalres.err)\n    }\n\n    /////////////////////////////////\n\n  } catch (err) {\n    let errobj = {}\n    let errmsg = await erroraction.oreerr(err)\n    console.log('ore. err--', errmsg)\n    return res.status(400).send(errmsg)\n  }\n}\n\nbridgeController.generate_claim = async (req, res) => {\n  if (\n    !req.body.claim_id ||\n    !req.body.account_name ||\n    !req.body.claim_data ||\n    !req.body.attribute_key ||\n    !req.body.pin ||\n    !req.body.account_type\n  ) {\n    let errorobj = await erroraction.incompleteargs(\"claim\", req.body)\n    console.log(\"errorobj-\", errorobj)\n    let str = errorobj.missingparams.join(\",\")\n    config.errors.incompleteArgument.message = \"Missing required parameters : \" + str\n    return res.status(400).send(config.errors.incompleteArgument)\n  }\n\n  if (req.body.account_type != 'virtual' && req.body.account_type != 'native') {\n    return res.status(400).send(config.errors.invalidacc_type)\n  }\n\n  if (req.body.account_type == 'native' && !req.body.main_account_name) {\n    return res.status(400).send(config.errors.missing_main_accname)\n  }\n\n  try {\n    let resp = await oreId.getUser(req.body.account_name)\n    let permobj = resp.permissions.find(\n      o => o.chainNetwork === process.env.chainNetwork\n    )\n    if (req.body.account_type == 'virtual') {\n      if (!permobj.accountType) {\n        if (permobj.publicKey) {\n          return res.status(400).send(config.errors.wrong_acc_type)\n        }\n      }\n      else {\n        if (permobj.accountType != \"nested\") {\n          return res.status(400).send(config.errors.wrong_acc_type)\n        }\n      }\n    }\n    else {\n      if (!permobj.accountType) {\n        if (!permobj.publicKey) {\n          return res.status(400).send(config.errors.wrong_acc_type)\n        }\n      }\n      else {\n        if (permobj.accountType != \"chain\") {\n          return res.status(400).send(config.errors.wrong_acc_type)\n        }\n      }\n    }\n\n    console.log('--', resp)\n  } catch (err) {\n    let errmsg = await erroraction.oreerr(err)\n    console.log('ore. err--', errmsg)\n    return res.status(400).send(errmsg)\n  }\n\n  let headers = config.headers\n  try {\n    let authorization = []\n    let chainAcc\n    let main_accname\n    if (req.body.account_type == 'virtual') {\n      main_accname = req.body.account_name\n      chainAcc = process.env.moonservicecontract\n      authorization = [\n        {\n          actor: process.env.moonservicecontract,\n          permission: req.body.account_name\n        }\n      ]\n    } else {\n      main_accname = req.body.main_account_name\n      chainAcc = req.body.main_account_name\n      authorization = [\n        {\n          actor: req.body.main_account_name,\n          permission: process.env.apppermission\n        }\n      ]\n    }\n    let hash = keccak256(JSON.stringify(req.body.claim_data))\n    console.log(hash)\n\n    const transactionJson = {\n      account: process.env.contract,\n      name: 'claimhash',\n      authorization: authorization,\n      data: {\n        username: req.body.account_name,\n        hash: hash,\n        attribute_key: req.body.attribute_key,\n        witness: process.env.contract,\n        witness_action: \"\",\n        claim_id: req.body.claim_id,\n        acctype: req.body.account_type,\n        main_accname: main_accname\n      }\n    }\n    let transaction = {\n      provider: 'custodial',\n      returnSignedTransaction: true,\n      chainNetwork: process.env.chainNetwork,\n      chainAccount: chainAcc,\n      account: req.body.account_name,\n      broadcast: false,\n      transaction: transactionJson,\n      userPassword: req.body.pin\n    }\n    let { signedTransaction } = await oreId.sign(transaction)\n  \n    let finalres = await actiontask.serializetrx(signedTransaction)\n    console.log('pushed result- ', finalres)\n    if (finalres.res) {\n      let respobj = {}\n      respobj.transaction_id = finalres.res.transaction_id;\n      respobj.claim_id = req.body.claim_id\n      return res.status(200).send(respobj)\n    }\n    else if (finalres.err) {\n      if (finalres.err.errcode == '2001') {\n        finalres.err.message = 'Violation of unique key constraint : claim_id already exists'\n      }\n      return res.status(400).send(finalres.err)\n    }\n\n  } catch (err) {\n    console.log('err-', err)\n    let errobj = {}\n    let errmsg = await erroraction.oreerr(err)\n    console.log('ore. err--', errmsg)\n    return res.status(400).send(errmsg)\n  }\n}\n\nbridgeController.whitelist_user = async (req, res) => {\n  if (!req.body.account_name || !req.body.main_account_name) {\n    let errorobj = await erroraction.incompleteargs(\"whitelist\", req.body)\n    console.log(\"errorobj-\", errorobj)\n    let str = errorobj.missingparams.join(\",\")\n    config.errors.incompleteArgument.message = \"Missing required parameters : \" + str\n    return res.status(400).send(config.errors.incompleteArgument)\n  }\n\n\n  try {\n    let resp = await oreId.getUser(req.body.account_name)\n    console.log('--', resp)\n    ////////////////////////\n    let permobj = resp.permissions.find(\n      o => o.chainNetwork === process.env.chainNetwork\n    )\n    if (permobj.chainAccount != req.body.main_account_name) {\n      return res.status(400).send(config.errors.wrong_mainnet_acc)\n    }\n\n    if (!permobj.accountType) {\n      if (!permobj.publicKey) {\n        return res.status(400).send(config.errors.not_mainnet_acc)\n      }\n    }\n    else {\n      if (permobj.accountType != \"chain\") {\n        return res.status(400).send(config.errors.not_mainnet_acc)\n      }\n    }\n    ///////////////////////\n  } catch (err) {\n    let errmsg = await erroraction.oreerr(err)\n    console.log('ore. err--', errmsg)\n    return res.status(400).send(errmsg)\n  }\n  try {\n    const transactionJson = {\n      account: process.env.contract,\n      name: 'addwhitelist',\n      authorization: [\n        {\n          actor: process.env.contractpermissionacc,\n          permission: process.env.apppermission\n        }\n      ],\n      data: {\n        username: req.body.main_account_name\n      }\n    }\n\n    var encoded = btoa(JSON.stringify(transactionJson))\n    console.log(encoded)\n\n    let oreresp = await axios.post(\n      'https://service.oreid.io/api/custodial/sign',\n      {\n        account: process.env.contractpermissionacc,\n        chain_account: process.env.contractpermissionacc,\n        transaction: encoded,\n        broadcast: false,\n        chain_network: process.env.chainNetwork,\n        user_password: process.env.contractpermissionaccpin\n      },\n      { headers: config.headers }\n    )\n\n    let finalres = await actiontask.serializetrx(\n      oreresp.data.signed_transaction\n    )\n    console.log('pushed result- ', finalres)\n    if (finalres.res) {\n      let respobj = {}\n      respobj.transaction_id = finalres.res.transaction_id;\n      respobj.issuccessful = true\n      return res.status(200).send(respobj)\n    }\n    else if (finalres.err) {\n      if (finalres.err.errcode == '2001') {\n        finalres.err.message = 'Violation of unique key constraint : main_account_name already whitelisted'\n      }\n      return res.status(400).send(finalres.err)\n    }\n   \n  } catch (err) {\n    let errobj = {}\n    let errmsg = await erroraction.oreerr(err)\n    console.log('ore. err--', errmsg)\n    return res.status(400).send(errmsg)\n  }\n}\n\nbridgeController.verify_claimdata = async (req, res) => {\n  if (\n    !req.body.account_name ||\n    !req.body.claim_data ||\n    !req.body.claim_id ||\n    !req.body.result_id ||\n    !req.body.main_account_name ||\n    !req.body.pin\n  ) {\n    let errorobj = await erroraction.incompleteargs(\"verifyres\", req.body)\n    console.log(\"errorobj-\", errorobj)\n    let str = errorobj.missingparams.join(\",\")\n    config.errors.incompleteArgument.message = \"Missing required parameters : \" + str\n    return res.status(400).send(config.errors.incompleteArgument)\n  }\n  try {\n    let resp = await oreId.getUser(req.body.account_name)\n    console.log('--', resp)\n  } catch (err) {\n    let errmsg = await erroraction.oreerr(err)\n    console.log('ore. err--', errmsg)\n    return res.status(400).send(errmsg)\n  }\n  let hash = keccak256(JSON.stringify(req.body.claim_data))\n  console.log(hash)\n  try {\n    let hash = keccak256(JSON.stringify(req.body.claim_data))\n    console.log(hash)\n\n    const transactionJson = {\n      account: process.env.contract,\n      name: 'verifyresult',\n      authorization: [\n        {\n          actor: req.body.main_account_name,\n          permission: process.env.apppermission\n        }\n      ],\n      data: {\n        username: req.body.main_account_name,\n        resultid: req.body.result_id,\n        claim_id: req.body.claim_id,\n        hash: hash\n      }\n    }\n    var encoded = btoa(JSON.stringify(transactionJson))\n\n    let oreresp = await axios.post(\n      'https://service.oreid.io/api/custodial/sign',\n      {\n        account: req.body.account_name,\n        chain_account: req.body.main_account_name,\n        transaction: encoded,\n        broadcast: false,\n        chain_network: process.env.chainNetwork,\n        user_password: req.body.pin\n      },\n      { headers: config.headers }\n    )\n   \n    let finalres = await actiontask.serializetrx(\n      oreresp.data.signed_transaction\n    )\n    console.log('pushed result- ', finalres)\n    if (finalres.res) {\n      let respobj = {}\n    let resultdata = await actiontask.eostransact(req.body.result_id)\n    let is_verified\n    if (resultdata.rows.length != 0) {\n      if (resultdata.rows[0].isverified)\n        is_verified = true\n      else\n        is_verified = false  \n      respobj.transaction_id = finalres.res.transaction_id;\n      respobj.isverified = is_verified\n      return res.status(200).send(respobj)\n    }\n    else {\n      respobj.transaction_id = finalres.res.transaction_id;\n      respobj.isverified = false\n      return res.status(200).send(respobj)\n    }\n  }\n    else if (finalres.err) {\n      if (finalres.err.errcode == '2001') {\n        finalres.err.message = 'Violation of unique key constraint : result_id already exists'\n      }\n      return res.status(400).send(finalres.err)\n    }\n    \n  } catch (err) {\n    console.log('err--', err)\n    let errobj = {}\n    let errmsg = await erroraction.oreerr(err)\n    console.log('ore. err--', errmsg)\n    return res.status(400).send(errmsg)\n  }\n}\nbridgeController.get_verification_result = async (req, res) => {\n  if (!req.params.result_id) {\n    let errorobj = await erroraction.incompleteargs(\"get_verification_result\", req.params)\n    console.log(\"errorobj-\", errorobj)\n    let str = errorobj.missingparams.join(\",\")\n    config.errors.incompleteArgument.message = \"Missing required parameters : \" + str\n    return res.status(400).send(config.errors.incompleteArgument)\n  }\n  try {\n\n    let resultdata = await actiontask.eostransact(req.params.result_id)\n    console.log(resultdata)\n    let resobj = {}\n    let is_verified\n    if (resultdata.rows.length != 0) {\n      if (resultdata.rows[0].isverified)\n        is_verified = true\n      else\n        is_verified = false\n      resobj.verification_result = is_verified\n      resobj.message = `Verification result is ${is_verified} for this resul_id `\n      return res.status(200).send(resobj)\n    } else {\n      resobj.verification_result = false\n      resobj.message =\n        'No entry for verification result found for this resul_id '\n      return res.status(200).send(resobj)\n    }\n  } catch (err) {\n    console.log('err--', err)\n    let errmsg = await config.errors.smartcontract_error.dspfetcherr\n    console.log('s.m. err--', errmsg)\n    return res.status(400).send(errmsg)\n  }\n}\n\nbridgeController.migrate_account = async (req, res) => {\n  if (!req.body.pin || !req.body.account_name) {\n    let errorobj = await erroraction.incompleteargs(\"migrate\", req.body)\n    console.log(\"errorobj-\", errorobj)\n    let str = errorobj.missingparams.join(\",\")\n    config.errors.incompleteArgument.message = \"Missing required parameters : \" + str\n    return res.status(400).send(config.errors.incompleteArgument)\n  }\n\n  try {\n    let resp = await oreId.getUser(req.body.account_name)\n    console.log('--', resp)\n  } catch (err) {\n    let errmsg = await erroraction.oreerr(err)\n    console.log('ore. err--', errmsg)\n    return res.status(400).send(errmsg)\n  }\n\n  try {\n    const args = {\n      chainNetwork: process.env.chainNetwork,\n      chainAccount: req.body.account_name,\n      account: req.body.account_name,\n      toType: 'native',\n      userPassword: req.body.pin\n    }\n\n    const result = await oreId.custodialMigrateAccount(args)\n    console.log('received main accn name-> ', result.account)\n    /////////////////////////////////////////////\n\n    const transactionJson = {\n      account: process.env.contract,\n      name: 'migrateacc',\n      authorization: [\n        {\n          actor: process.env.contractpermissionacc,\n          permission: process.env.apppermission\n        }\n      ],\n      data: {\n        username: req.body.account_name,\n        main_accname: result.account\n      }\n    }\n\n    var encoded = btoa(JSON.stringify(transactionJson))\n    console.log(encoded)\n\n    let oreresp = await axios.post(\n      'https://service.oreid.io/api/custodial/sign',\n      {\n        account: process.env.contractpermissionacc,\n        chain_account: process.env.contractpermissionacc,\n        transaction: encoded,\n        broadcast: false,\n        chain_network: process.env.chainNetwork,\n        user_password: process.env.contractpermissionaccpin\n      },\n      { headers: config.headers }\n    )\n  \n    let finalres = await actiontask.serializetrx(\n      oreresp.data.signed_transaction\n    )\n    console.log('pushed result- ', finalres)\n    if (finalres.res) {\n      let respobj = {}\n      respobj.main_account_name = result.account\n      respobj.account_name = req.body.account_name\n      return res.status(200).send(respobj)\n    }\n    else if (finalres.err) {\n      return res.status(400).send(finalres.err)\n    }\n\n  } catch (err) {\n    let errobj = {}\n    let errmsg = await erroraction.oreerr(err)\n    console.log('ore. err--', errmsg)\n    return res.status(400).send(errmsg)\n  }\n}\n\nbridgeController.get_transaction_info = async (req, res) => {\n  if (!req.params.transaction_id) {\n    let errorobj = await erroraction.incompleteargs(\"gettransaction\", req.params)\n    console.log(\"errorobj-\", errorobj)\n    let str = errorobj.missingparams.join(\",\")\n    config.errors.incompleteArgument.message = \"Missing required parameters : \" + str\n    return res.status(400).send(config.errors.incompleteArgument)\n  }\n\n  try {\n    let trxinfo = await actiontask.getTransaction(req.params.transaction_id)\n    console.log('info--', trxinfo)\n    let respobj = {}\n\n    if (trxinfo.trx.receipt.status == 'executed') {\n      respobj.transaction_status = 'Submitted'\n      respobj.message = 'Transaction submitted successfully. Pending for confirmation'\n      console.log(\"expiration--\", trxinfo.trx.trx.expiration)\n      console.log(\"now time--\", new Date(Date.now()).toISOString().replace(/\\..+/, ''))\n      if (trxinfo.block_num < trxinfo.last_irreversible_block && trxinfo.trx.trx.expiration < new Date(Date.now()).toISOString().replace(/\\..+/, '')) {\n        respobj.transaction_status = 'Confirmed'\n        respobj.message = 'Transaction is confirmed (irreversible) successfully'\n      }\n      else if (trxinfo.block_num > trxinfo.last_irreversible_block) {\n        if (trxinfo.trx.trx.expiration < new Date(Date.now()).toISOString().replace(/\\..+/, '')) {\n          respobj.transaction_status = 'Not confirmed'\n          respobj.message = 'Transaction submitted and reaches its expiration yet not confirmed (irreversible)'\n        }\n      }\n    }\n    else {\n      respobj.transaction_status = trxinfo.trx.receipt.status\n      respobj.message = 'Transaction is not executed successfully'\n    }\n\n    return res.status(200).send(respobj)\n  } catch (err) {\n    console.log('err--', err)\n    let errmsg = await erroraction.smartcontracterr(err)\n    console.log('s.m. err--', errmsg)\n    let respobj = {}\n    if (errmsg.message == 'Transaction not found in history') {\n      respobj.transaction_status = 'Failed'\n      respobj.message =\n        'Transaction id not found. Transaction dropped or incorrect id.'\n      return res.status(400).send(respobj)\n    } else {\n      return res.status(400).send(errmsg)\n    }\n  }\n}\n\n/// ///////////////////////\nexport default bridgeController"]}